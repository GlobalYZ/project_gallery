{
    "sourceFile": "src/components/ImageTrack.jsx",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1735260660698,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1735260660698,
            "name": "Commit-0",
            "content": "import { useState, useRef, useEffect } from \"react\";\r\n\r\nconst ImageTrack = ({ \r\n  images = [], \r\n  externalMouseDownAt,\r\n  externalPercentage,\r\n  onPercentageChange\r\n}) => {\r\n  const trackRef = useRef(null);\r\n  const [mouseDownAt, setMouseDownAt] = useState(\"0\");\r\n  const [prevPercentage, setPrevPercentage] = useState(\"0\");\r\n  const [percentage, setPercentage] = useState(\"0\");\r\n  const [selectedImage, setSelectedImage] = useState(null);\r\n  const [isMinimized] = useState(false);\r\n\r\n  useEffect(() => {\r\n    if (externalMouseDownAt !== undefined) {\r\n      setMouseDownAt(externalMouseDownAt);\r\n    }\r\n  }, [externalMouseDownAt]);\r\n\r\n  useEffect(() => {\r\n    if (externalPercentage !== undefined) {\r\n      setPercentage(externalPercentage);\r\n      setPrevPercentage(externalPercentage);\r\n    }\r\n  }, [externalPercentage]);\r\n\r\n  const handleOnDown = (e) => {\r\n    setMouseDownAt(e.clientX || e.touches?.[0]?.clientX || \"0\");\r\n  };\r\n\r\n  const handleOnUp = () => {\r\n    setMouseDownAt(\"0\");\r\n    setPrevPercentage(percentage);\r\n  };\r\n\r\n  const handleOnMove = (e) => {\r\n    if (mouseDownAt === \"0\") return;\r\n\r\n    const clientX = e.clientX || e.touches?.[0]?.clientX || 0;\r\n    const mouseDelta = parseFloat(mouseDownAt) - clientX;\r\n    \r\n    // 根据图片数量动态计算 maxDelta\r\n    const baseMultiplier = 2; // 基础乘数\r\n    const imageCountMultiplier = Math.ceil(images.length / 3); // 每3张图片增加一个乘数\r\n    const maxDelta = window.innerWidth * baseMultiplier * imageCountMultiplier;\r\n\r\n    const nextPercentageUnconstrained = (mouseDelta / maxDelta) * -100 + parseFloat(prevPercentage);\r\n    const nextPercentage = Math.max(Math.min(nextPercentageUnconstrained, 0), -200);\r\n\r\n    setPercentage(nextPercentage.toString());\r\n    onPercentageChange?.(nextPercentage.toString());\r\n  };\r\n\r\n  useEffect(() => {\r\n    const handleMouseMove = (e) => handleOnMove(e);\r\n    const handleMouseUp = () => handleOnUp();\r\n\r\n    document.addEventListener('mousemove', handleMouseMove);\r\n    document.addEventListener('mouseup', handleMouseUp);\r\n\r\n    return () => {\r\n      document.removeEventListener('mousemove', handleMouseMove);\r\n      document.removeEventListener('mouseup', handleMouseUp);\r\n    };\r\n  }, [mouseDownAt, prevPercentage]);\r\n\r\n  // 计算每张图片的object-position\r\n  const calculateObjectPosition = (index) => {\r\n    // 将百分比转换为0-1之间的值\r\n    const normalizedPercentage = (parseFloat(percentage) + 200) / 200;\r\n    // 根据图片位置计算偏移量，中间的图片偏移最小\r\n    const centerIndex = Math.floor(images.length / 2);\r\n    const distanceFromCenter = index - centerIndex;\r\n    // 偏移范围从-20到20\r\n    const offset = distanceFromCenter * 20 * normalizedPercentage;\r\n    \r\n    return `${50 + offset}% center`;\r\n  };\r\n\r\n  return (\r\n    <div className=\"fixed w-screen h-screen overflow-hidden bg-black\">\r\n      {/* Selected Image Overlay */}\r\n      {selectedImage && (\r\n        <div className=\"fixed top-[10vh] left-[10vw] w-[80vw] h-[80vh] z-10 bg-black\">\r\n          <img\r\n            src={selectedImage}\r\n            alt=\"Selected\"\r\n            className=\"w-full h-full object-contain\"\r\n          />\r\n        </div>\r\n      )}\r\n\r\n      {/* Image Track */}\r\n      <div\r\n        ref={trackRef}\r\n        className={`flex gap-[4vmin] absolute left-[50%] top-1/2 -translate-y-1/2 select-none cursor-grab duration-600\r\n          ${isMinimized ? 'fixed right-[2vmin] bottom-[2vmin] top-auto left-auto scale-[0.2] origin-bottom-right z-50 hover:scale-[0.25] transition-all duration-400' : ''}\r\n          transition-transform duration-300 ease-out`}\r\n        style={{\r\n          transform: `translate(${percentage}%, -50%)`,\r\n        }}\r\n        onMouseDown={handleOnDown}\r\n        onTouchStart={handleOnDown}\r\n        onTouchEnd={handleOnUp}\r\n        onTouchMove={handleOnMove}\r\n      >\r\n        {images.map((image, index) => (\r\n          <img\r\n            key={index}\r\n            src={image}\r\n            draggable=\"false\"\r\n            className=\"md:size-[40vmin] size-[60vmin] object-cover transition-all duration-300 ease-out hover:scale-105\"\r\n            style={{\r\n              objectPosition: calculateObjectPosition(index)\r\n            }}\r\n            onClick={() => setSelectedImage(image)}\r\n          />\r\n        ))}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ImageTrack; "
        }
    ]
}