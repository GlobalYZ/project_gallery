{
    "sourceFile": "src/components/Navbar.jsx",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 20,
            "patches": [
                {
                    "date": 1735257966366,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1735257977877,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -87,9 +87,9 @@\n                 </a>\r\n               ))}\r\n             </div> */}\r\n \r\n-<Button\r\n+            <Button\r\n               id=\"product-button\"\r\n               title=\"Products\"\r\n               rightIcon={<TiLocationArrow />}\r\n               containerClass=\"bg-blue-50 md:flex hidden items-center justify-center gap-1\"\r\n"
                },
                {
                    "date": 1735258044343,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,127 @@\n+import clsx from \"clsx\";\r\n+import gsap from \"gsap\";\r\n+import { useWindowScroll } from \"react-use\";\r\n+import { useEffect, useRef, useState } from \"react\";\r\n+import { TiLocationArrow } from \"react-icons/ti\";\r\n+\r\n+import Button from \"./Button\";\r\n+\r\n+const navItems = [\"Nexus\", \"Vault\", \"Prologue\", \"About\", \"Contact\"];\r\n+\r\n+const NavBar = () => {\r\n+  // State for toggling audio and visual indicator\r\n+  const [isAudioPlaying, setIsAudioPlaying] = useState(false);\r\n+  const [isIndicatorActive, setIsIndicatorActive] = useState(false);\r\n+\r\n+  // Refs for audio and navigation container\r\n+  const audioElementRef = useRef(null);\r\n+  const navContainerRef = useRef(null);\r\n+\r\n+  const { y: currentScrollY } = useWindowScroll();\r\n+  const [isNavVisible, setIsNavVisible] = useState(true);\r\n+  const [lastScrollY, setLastScrollY] = useState(0);\r\n+\r\n+  // Toggle audio and visual indicator\r\n+  const toggleAudioIndicator = () => {\r\n+    setIsAudioPlaying((prev) => !prev);\r\n+    setIsIndicatorActive((prev) => !prev);\r\n+  };\r\n+\r\n+  // Manage audio playback\r\n+  useEffect(() => {\r\n+    if (isAudioPlaying) {\r\n+      audioElementRef.current.play();\r\n+    } else {\r\n+      audioElementRef.current.pause();\r\n+    }\r\n+  }, [isAudioPlaying]);\r\n+\r\n+  useEffect(() => {\r\n+    if (currentScrollY === 0) {\r\n+      // Topmost position: show navbar without floating-nav\r\n+      setIsNavVisible(true);\r\n+      navContainerRef.current.classList.remove(\"floating-nav\");\r\n+    } else if (currentScrollY > lastScrollY) {\r\n+      // Scrolling down: hide navbar and apply floating-nav\r\n+      setIsNavVisible(false);\r\n+      navContainerRef.current.classList.add(\"floating-nav\");\r\n+    } else if (currentScrollY < lastScrollY) {\r\n+      // Scrolling up: show navbar with floating-nav\r\n+      setIsNavVisible(true);\r\n+      navContainerRef.current.classList.add(\"floating-nav\");\r\n+    }\r\n+\r\n+    setLastScrollY(currentScrollY);\r\n+  }, [currentScrollY, lastScrollY]);\r\n+\r\n+  useEffect(() => {\r\n+    gsap.to(navContainerRef.current, {\r\n+      y: isNavVisible ? 0 : -100,\r\n+      opacity: isNavVisible ? 1 : 0,\r\n+      duration: 0.2,\r\n+    });\r\n+  }, [isNavVisible]);\r\n+\r\n+  return (\r\n+    <div\r\n+      ref={navContainerRef}\r\n+      className=\"fixed inset-x-0 top-4 z-50 h-16 border-none transition-all duration-700 sm:inset-x-6 bg-orange-500\"\r\n+    >\r\n+      <header className=\"absolute top-1/2 w-full -translate-y-1/2\">\r\n+        <nav className=\"flex size-full items-center justify-between p-4\">\r\n+          {/* Logo and Product button */}\r\n+          <div className=\"flex items-center gap-7\">\r\n+            <img src=\"/img/logo.png\" alt=\"logo\" className=\"w-10\" />\r\n+          </div>\r\n+\r\n+          {/* Navigation Links and Audio Button */}\r\n+          <div className=\"flex h-full items-center\">\r\n+            {/* <div className=\"hidden md:block\">\r\n+              {navItems.map((item, index) => (\r\n+                <a\r\n+                  key={index}\r\n+                  href={`#${item.toLowerCase()}`}\r\n+                  className=\"nav-hover-btn\"\r\n+                >\r\n+                  {item}\r\n+                </a>\r\n+              ))}\r\n+            </div> */}\r\n+\r\n+            <Button\r\n+              id=\"product-button\"\r\n+              title=\"Products\"\r\n+              rightIcon={<TiLocationArrow />}\r\n+              containerClass=\"bg-blue-50 md:flex hidden items-center justify-center gap-1\"\r\n+            />\r\n+\r\n+            <button\r\n+              onClick={toggleAudioIndicator}\r\n+              className=\"ml-10 flex items-center space-x-0.5\"\r\n+            >\r\n+              <audio\r\n+                ref={audioElementRef}\r\n+                className=\"hidden\"\r\n+                src=\"/audio/loop.mp3\"\r\n+                loop\r\n+              />\r\n+              {[1, 2, 3, 4].map((bar) => (\r\n+                <div\r\n+                  key={bar}\r\n+                  className={clsx(\"indicator-line\", {\r\n+                    active: isIndicatorActive,\r\n+                  })}\r\n+                  style={{\r\n+                    animationDelay: `${bar * 0.1}s`,\r\n+                  }}\r\n+                />\r\n+              ))}\r\n+            </button>\r\n+          </div>\r\n+        </nav>\r\n+      </header>\r\n+    </div>\r\n+  );\r\n+};\r\n+\r\n+export default NavBar;\r\n"
                },
                {
                    "date": 1735258060182,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,127 @@\n+import clsx from \"clsx\";\r\n+import gsap from \"gsap\";\r\n+import { useWindowScroll } from \"react-use\";\r\n+import { useEffect, useRef, useState } from \"react\";\r\n+import { TiLocationArrow } from \"react-icons/ti\";\r\n+\r\n+import Button from \"./Button\";\r\n+\r\n+const navItems = [\"Nexus\", \"Vault\", \"Prologue\", \"About\", \"Contact\"];\r\n+\r\n+const NavBar = () => {\r\n+  // State for toggling audio and visual indicator\r\n+  const [isAudioPlaying, setIsAudioPlaying] = useState(false);\r\n+  const [isIndicatorActive, setIsIndicatorActive] = useState(false);\r\n+\r\n+  // Refs for audio and navigation container\r\n+  const audioElementRef = useRef(null);\r\n+  const navContainerRef = useRef(null);\r\n+\r\n+  const { y: currentScrollY } = useWindowScroll();\r\n+  const [isNavVisible, setIsNavVisible] = useState(true);\r\n+  const [lastScrollY, setLastScrollY] = useState(0);\r\n+\r\n+  // Toggle audio and visual indicator\r\n+  const toggleAudioIndicator = () => {\r\n+    setIsAudioPlaying((prev) => !prev);\r\n+    setIsIndicatorActive((prev) => !prev);\r\n+  };\r\n+\r\n+  // Manage audio playback\r\n+  useEffect(() => {\r\n+    if (isAudioPlaying) {\r\n+      audioElementRef.current.play();\r\n+    } else {\r\n+      audioElementRef.current.pause();\r\n+    }\r\n+  }, [isAudioPlaying]);\r\n+\r\n+  useEffect(() => {\r\n+    if (currentScrollY === 0) {\r\n+      // Topmost position: show navbar without floating-nav\r\n+      setIsNavVisible(true);\r\n+      navContainerRef.current.classList.remove(\"floating-nav\");\r\n+    } else if (currentScrollY > lastScrollY) {\r\n+      // Scrolling down: hide navbar and apply floating-nav\r\n+      setIsNavVisible(false);\r\n+      navContainerRef.current.classList.add(\"floating-nav\");\r\n+    } else if (currentScrollY < lastScrollY) {\r\n+      // Scrolling up: show navbar with floating-nav\r\n+      setIsNavVisible(true);\r\n+      navContainerRef.current.classList.add(\"floating-nav\");\r\n+    }\r\n+\r\n+    setLastScrollY(currentScrollY);\r\n+  }, [currentScrollY, lastScrollY]);\r\n+\r\n+  useEffect(() => {\r\n+    gsap.to(navContainerRef.current, {\r\n+      y: isNavVisible ? 0 : -100,\r\n+      opacity: isNavVisible ? 1 : 0,\r\n+      duration: 0.2,\r\n+    });\r\n+  }, [isNavVisible]);\r\n+\r\n+  return (\r\n+    <div\r\n+      ref={navContainerRef}\r\n+      className=\"fixed inset-x-0 top-4 z-50 h-16 border-none transition-all duration-700 sm:inset-x-6 bg-orange-500 opacity-50\"\r\n+    >\r\n+      <header className=\"absolute top-1/2 w-full -translate-y-1/2\">\r\n+        <nav className=\"flex size-full items-center justify-between p-4\">\r\n+          {/* Logo and Product button */}\r\n+          <div className=\"flex items-center gap-7\">\r\n+            <img src=\"/img/logo.png\" alt=\"logo\" className=\"w-10\" />\r\n+          </div>\r\n+\r\n+          {/* Navigation Links and Audio Button */}\r\n+          <div className=\"flex h-full items-center\">\r\n+            {/* <div className=\"hidden md:block\">\r\n+              {navItems.map((item, index) => (\r\n+                <a\r\n+                  key={index}\r\n+                  href={`#${item.toLowerCase()}`}\r\n+                  className=\"nav-hover-btn\"\r\n+                >\r\n+                  {item}\r\n+                </a>\r\n+              ))}\r\n+            </div> */}\r\n+\r\n+            <Button\r\n+              id=\"product-button\"\r\n+              title=\"Products\"\r\n+              rightIcon={<TiLocationArrow />}\r\n+              containerClass=\"bg-blue-50 md:flex hidden items-center justify-center gap-1\"\r\n+            />\r\n+\r\n+            <button\r\n+              onClick={toggleAudioIndicator}\r\n+              className=\"ml-10 flex items-center space-x-0.5\"\r\n+            >\r\n+              <audio\r\n+                ref={audioElementRef}\r\n+                className=\"hidden\"\r\n+                src=\"/audio/loop.mp3\"\r\n+                loop\r\n+              />\r\n+              {[1, 2, 3, 4].map((bar) => (\r\n+                <div\r\n+                  key={bar}\r\n+                  className={clsx(\"indicator-line\", {\r\n+                    active: isIndicatorActive,\r\n+                  })}\r\n+                  style={{\r\n+                    animationDelay: `${bar * 0.1}s`,\r\n+                  }}\r\n+                />\r\n+              ))}\r\n+            </button>\r\n+          </div>\r\n+        </nav>\r\n+      </header>\r\n+    </div>\r\n+  );\r\n+};\r\n+\r\n+export default NavBar;\r\n"
                },
                {
                    "date": 1735258116372,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -64,265 +64,11 @@\n \r\n   return (\r\n     <div\r\n       ref={navContainerRef}\r\n-      className=\"fixed inset-x-0 top-4 z-50 h-16 border-none transition-all duration-700 sm:inset-x-6 bg-orange-500 opacity-50\"\r\n-    >\r\n-      <header className=\"absolute top-1/2 w-full -translate-y-1/2\">\r\n-        <nav className=\"flex size-full items-center justify-between p-4\">\r\n-          {/* Logo and Product button */}\r\n-          <div className=\"flex items-center gap-7\">\r\n-            <img src=\"/img/logo.png\" alt=\"logo\" className=\"w-10\" />\r\n-          </div>\r\n-\r\n-          {/* Navigation Links and Audio Button */}\r\n-          <div className=\"flex h-full items-center\">\r\n-            {/* <div className=\"hidden md:block\">\r\n-              {navItems.map((item, index) => (\r\n-                <a\r\n-                  key={index}\r\n-                  href={`#${item.toLowerCase()}`}\r\n-                  className=\"nav-hover-btn\"\r\n-                >\r\n-                  {item}\r\n-                </a>\r\n-              ))}\r\n-            </div> */}\r\n-\r\n-            <Button\r\n-              id=\"product-button\"\r\n-              title=\"Products\"\r\n-              rightIcon={<TiLocationArrow />}\r\n-              containerClass=\"bg-blue-50 md:flex hidden items-center justify-center gap-1\"\r\n-            />\r\n-\r\n-            <button\r\n-              onClick={toggleAudioIndicator}\r\n-              className=\"ml-10 flex items-center space-x-0.5\"\r\n-            >\r\n-              <audio\r\n-                ref={audioElementRef}\r\n-                className=\"hidden\"\r\n-                src=\"/audio/loop.mp3\"\r\n-                loop\r\n-              />\r\n-              {[1, 2, 3, 4].map((bar) => (\r\n-                <div\r\n-                  key={bar}\r\n-                  className={clsx(\"indicator-line\", {\r\n-                    active: isIndicatorActive,\r\n-                  })}\r\n-                  style={{\r\n-                    animationDelay: `${bar * 0.1}s`,\r\n-                  }}\r\n-                />\r\n-              ))}\r\n-            </button>\r\n-          </div>\r\n-        </nav>\r\n-      </header>\r\n-    </div>\r\n-  );\r\n-};\r\n-\r\n-export default NavBar;\r\n-import clsx from \"clsx\";\r\n-import gsap from \"gsap\";\r\n-import { useWindowScroll } from \"react-use\";\r\n-import { useEffect, useRef, useState } from \"react\";\r\n-import { TiLocationArrow } from \"react-icons/ti\";\r\n-\r\n-import Button from \"./Button\";\r\n-\r\n-const navItems = [\"Nexus\", \"Vault\", \"Prologue\", \"About\", \"Contact\"];\r\n-\r\n-const NavBar = () => {\r\n-  // State for toggling audio and visual indicator\r\n-  const [isAudioPlaying, setIsAudioPlaying] = useState(false);\r\n-  const [isIndicatorActive, setIsIndicatorActive] = useState(false);\r\n-\r\n-  // Refs for audio and navigation container\r\n-  const audioElementRef = useRef(null);\r\n-  const navContainerRef = useRef(null);\r\n-\r\n-  const { y: currentScrollY } = useWindowScroll();\r\n-  const [isNavVisible, setIsNavVisible] = useState(true);\r\n-  const [lastScrollY, setLastScrollY] = useState(0);\r\n-\r\n-  // Toggle audio and visual indicator\r\n-  const toggleAudioIndicator = () => {\r\n-    setIsAudioPlaying((prev) => !prev);\r\n-    setIsIndicatorActive((prev) => !prev);\r\n-  };\r\n-\r\n-  // Manage audio playback\r\n-  useEffect(() => {\r\n-    if (isAudioPlaying) {\r\n-      audioElementRef.current.play();\r\n-    } else {\r\n-      audioElementRef.current.pause();\r\n-    }\r\n-  }, [isAudioPlaying]);\r\n-\r\n-  useEffect(() => {\r\n-    if (currentScrollY === 0) {\r\n-      // Topmost position: show navbar without floating-nav\r\n-      setIsNavVisible(true);\r\n-      navContainerRef.current.classList.remove(\"floating-nav\");\r\n-    } else if (currentScrollY > lastScrollY) {\r\n-      // Scrolling down: hide navbar and apply floating-nav\r\n-      setIsNavVisible(false);\r\n-      navContainerRef.current.classList.add(\"floating-nav\");\r\n-    } else if (currentScrollY < lastScrollY) {\r\n-      // Scrolling up: show navbar with floating-nav\r\n-      setIsNavVisible(true);\r\n-      navContainerRef.current.classList.add(\"floating-nav\");\r\n-    }\r\n-\r\n-    setLastScrollY(currentScrollY);\r\n-  }, [currentScrollY, lastScrollY]);\r\n-\r\n-  useEffect(() => {\r\n-    gsap.to(navContainerRef.current, {\r\n-      y: isNavVisible ? 0 : -100,\r\n-      opacity: isNavVisible ? 1 : 0,\r\n-      duration: 0.2,\r\n-    });\r\n-  }, [isNavVisible]);\r\n-\r\n-  return (\r\n-    <div\r\n-      ref={navContainerRef}\r\n-      className=\"fixed inset-x-0 top-4 z-50 h-16 border-none transition-all duration-700 sm:inset-x-6 bg-orange-500\"\r\n-    >\r\n-      <header className=\"absolute top-1/2 w-full -translate-y-1/2\">\r\n-        <nav className=\"flex size-full items-center justify-between p-4\">\r\n-          {/* Logo and Product button */}\r\n-          <div className=\"flex items-center gap-7\">\r\n-            <img src=\"/img/logo.png\" alt=\"logo\" className=\"w-10\" />\r\n-          </div>\r\n-\r\n-          {/* Navigation Links and Audio Button */}\r\n-          <div className=\"flex h-full items-center\">\r\n-            {/* <div className=\"hidden md:block\">\r\n-              {navItems.map((item, index) => (\r\n-                <a\r\n-                  key={index}\r\n-                  href={`#${item.toLowerCase()}`}\r\n-                  className=\"nav-hover-btn\"\r\n-                >\r\n-                  {item}\r\n-                </a>\r\n-              ))}\r\n-            </div> */}\r\n-\r\n-            <Button\r\n-              id=\"product-button\"\r\n-              title=\"Products\"\r\n-              rightIcon={<TiLocationArrow />}\r\n-              containerClass=\"bg-blue-50 md:flex hidden items-center justify-center gap-1\"\r\n-            />\r\n-\r\n-            <button\r\n-              onClick={toggleAudioIndicator}\r\n-              className=\"ml-10 flex items-center space-x-0.5\"\r\n-            >\r\n-              <audio\r\n-                ref={audioElementRef}\r\n-                className=\"hidden\"\r\n-                src=\"/audio/loop.mp3\"\r\n-                loop\r\n-              />\r\n-              {[1, 2, 3, 4].map((bar) => (\r\n-                <div\r\n-                  key={bar}\r\n-                  className={clsx(\"indicator-line\", {\r\n-                    active: isIndicatorActive,\r\n-                  })}\r\n-                  style={{\r\n-                    animationDelay: `${bar * 0.1}s`,\r\n-                  }}\r\n-                />\r\n-              ))}\r\n-            </button>\r\n-          </div>\r\n-        </nav>\r\n-      </header>\r\n-    </div>\r\n-  );\r\n-};\r\n-\r\n-export default NavBar;\r\n-import clsx from \"clsx\";\r\n-import gsap from \"gsap\";\r\n-import { useWindowScroll } from \"react-use\";\r\n-import { useEffect, useRef, useState } from \"react\";\r\n-import { TiLocationArrow } from \"react-icons/ti\";\r\n-\r\n-import Button from \"./Button\";\r\n-\r\n-const navItems = [\"Nexus\", \"Vault\", \"Prologue\", \"About\", \"Contact\"];\r\n-\r\n-const NavBar = () => {\r\n-  // State for toggling audio and visual indicator\r\n-  const [isAudioPlaying, setIsAudioPlaying] = useState(false);\r\n-  const [isIndicatorActive, setIsIndicatorActive] = useState(false);\r\n-\r\n-  // Refs for audio and navigation container\r\n-  const audioElementRef = useRef(null);\r\n-  const navContainerRef = useRef(null);\r\n-\r\n-  const { y: currentScrollY } = useWindowScroll();\r\n-  const [isNavVisible, setIsNavVisible] = useState(true);\r\n-  const [lastScrollY, setLastScrollY] = useState(0);\r\n-\r\n-  // Toggle audio and visual indicator\r\n-  const toggleAudioIndicator = () => {\r\n-    setIsAudioPlaying((prev) => !prev);\r\n-    setIsIndicatorActive((prev) => !prev);\r\n-  };\r\n-\r\n-  // Manage audio playback\r\n-  useEffect(() => {\r\n-    if (isAudioPlaying) {\r\n-      audioElementRef.current.play();\r\n-    } else {\r\n-      audioElementRef.current.pause();\r\n-    }\r\n-  }, [isAudioPlaying]);\r\n-\r\n-  useEffect(() => {\r\n-    if (currentScrollY === 0) {\r\n-      // Topmost position: show navbar without floating-nav\r\n-      setIsNavVisible(true);\r\n-      navContainerRef.current.classList.remove(\"floating-nav\");\r\n-    } else if (currentScrollY > lastScrollY) {\r\n-      // Scrolling down: hide navbar and apply floating-nav\r\n-      setIsNavVisible(false);\r\n-      navContainerRef.current.classList.add(\"floating-nav\");\r\n-    } else if (currentScrollY < lastScrollY) {\r\n-      // Scrolling up: show navbar with floating-nav\r\n-      setIsNavVisible(true);\r\n-      navContainerRef.current.classList.add(\"floating-nav\");\r\n-    }\r\n-\r\n-    setLastScrollY(currentScrollY);\r\n-  }, [currentScrollY, lastScrollY]);\r\n-\r\n-  useEffect(() => {\r\n-    gsap.to(navContainerRef.current, {\r\n-      y: isNavVisible ? 0 : -100,\r\n-      opacity: isNavVisible ? 1 : 0,\r\n-      duration: 0.2,\r\n-    });\r\n-  }, [isNavVisible]);\r\n-\r\n-  return (\r\n-    <div\r\n-      ref={navContainerRef}\r\n       className=\"fixed inset-x-0 top-4 z-50 h-16 border-none transition-all duration-700 sm:inset-x-6\"\r\n     >\r\n-      <header className=\"absolute top-1/2 w-full -translate-y-1/2\">\r\n+      <header className=\"absolute top-1/2 w-full -translate-y-1/2 bg-orange-500 opacity-50\">\r\n         <nav className=\"flex size-full items-center justify-between p-4\">\r\n           {/* Logo and Product button */}\r\n           <div className=\"flex items-center gap-7\">\r\n             <img src=\"/img/logo.png\" alt=\"logo\" className=\"w-10\" />\r\n"
                },
                {
                    "date": 1735258145606,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,127 @@\n+import clsx from \"clsx\";\r\n+import gsap from \"gsap\";\r\n+import { useWindowScroll } from \"react-use\";\r\n+import { useEffect, useRef, useState } from \"react\";\r\n+import { TiLocationArrow } from \"react-icons/ti\";\r\n+\r\n+import Button from \"./Button\";\r\n+\r\n+const navItems = [\"Nexus\", \"Vault\", \"Prologue\", \"About\", \"Contact\"];\r\n+\r\n+const NavBar = () => {\r\n+  // State for toggling audio and visual indicator\r\n+  const [isAudioPlaying, setIsAudioPlaying] = useState(false);\r\n+  const [isIndicatorActive, setIsIndicatorActive] = useState(false);\r\n+\r\n+  // Refs for audio and navigation container\r\n+  const audioElementRef = useRef(null);\r\n+  const navContainerRef = useRef(null);\r\n+\r\n+  const { y: currentScrollY } = useWindowScroll();\r\n+  const [isNavVisible, setIsNavVisible] = useState(true);\r\n+  const [lastScrollY, setLastScrollY] = useState(0);\r\n+\r\n+  // Toggle audio and visual indicator\r\n+  const toggleAudioIndicator = () => {\r\n+    setIsAudioPlaying((prev) => !prev);\r\n+    setIsIndicatorActive((prev) => !prev);\r\n+  };\r\n+\r\n+  // Manage audio playback\r\n+  useEffect(() => {\r\n+    if (isAudioPlaying) {\r\n+      audioElementRef.current.play();\r\n+    } else {\r\n+      audioElementRef.current.pause();\r\n+    }\r\n+  }, [isAudioPlaying]);\r\n+\r\n+  useEffect(() => {\r\n+    if (currentScrollY === 0) {\r\n+      // Topmost position: show navbar without floating-nav\r\n+      setIsNavVisible(true);\r\n+      navContainerRef.current.classList.remove(\"floating-nav\");\r\n+    } else if (currentScrollY > lastScrollY) {\r\n+      // Scrolling down: hide navbar and apply floating-nav\r\n+      setIsNavVisible(false);\r\n+      navContainerRef.current.classList.add(\"floating-nav\");\r\n+    } else if (currentScrollY < lastScrollY) {\r\n+      // Scrolling up: show navbar with floating-nav\r\n+      setIsNavVisible(true);\r\n+      navContainerRef.current.classList.add(\"floating-nav\");\r\n+    }\r\n+\r\n+    setLastScrollY(currentScrollY);\r\n+  }, [currentScrollY, lastScrollY]);\r\n+\r\n+  useEffect(() => {\r\n+    gsap.to(navContainerRef.current, {\r\n+      y: isNavVisible ? 0 : -100,\r\n+      opacity: isNavVisible ? 1 : 0,\r\n+      duration: 0.2,\r\n+    });\r\n+  }, [isNavVisible]);\r\n+\r\n+  return (\r\n+    <div\r\n+      ref={navContainerRef}\r\n+      className=\"fixed inset-x-0 top-4 z-50 h-16 border-none transition-all duration-700 sm:inset-x-6\"\r\n+    >\r\n+      <header className=\"absolute top-1/2 w-full -translate-y-1/2\">\r\n+        <nav className=\"flex size-full items-center justify-between p-4 bg-orange-500 opacity-50\">\r\n+          {/* Logo and Product button */}\r\n+          <div className=\"flex items-center gap-7\">\r\n+            <img src=\"/img/logo.png\" alt=\"logo\" className=\"w-10\" />\r\n+          </div>\r\n+\r\n+          {/* Navigation Links and Audio Button */}\r\n+          <div className=\"flex h-full items-center\">\r\n+            {/* <div className=\"hidden md:block\">\r\n+              {navItems.map((item, index) => (\r\n+                <a\r\n+                  key={index}\r\n+                  href={`#${item.toLowerCase()}`}\r\n+                  className=\"nav-hover-btn\"\r\n+                >\r\n+                  {item}\r\n+                </a>\r\n+              ))}\r\n+            </div> */}\r\n+\r\n+            <Button\r\n+              id=\"product-button\"\r\n+              title=\"Products\"\r\n+              rightIcon={<TiLocationArrow />}\r\n+              containerClass=\"bg-blue-50 md:flex hidden items-center justify-center gap-1\"\r\n+            />\r\n+\r\n+            <button\r\n+              onClick={toggleAudioIndicator}\r\n+              className=\"ml-10 flex items-center space-x-0.5\"\r\n+            >\r\n+              <audio\r\n+                ref={audioElementRef}\r\n+                className=\"hidden\"\r\n+                src=\"/audio/loop.mp3\"\r\n+                loop\r\n+              />\r\n+              {[1, 2, 3, 4].map((bar) => (\r\n+                <div\r\n+                  key={bar}\r\n+                  className={clsx(\"indicator-line\", {\r\n+                    active: isIndicatorActive,\r\n+                  })}\r\n+                  style={{\r\n+                    animationDelay: `${bar * 0.1}s`,\r\n+                  }}\r\n+                />\r\n+              ))}\r\n+            </button>\r\n+          </div>\r\n+        </nav>\r\n+      </header>\r\n+    </div>\r\n+  );\r\n+};\r\n+\r\n+export default NavBar;\r\n"
                },
                {
                    "date": 1735258158675,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,127 @@\n+import clsx from \"clsx\";\r\n+import gsap from \"gsap\";\r\n+import { useWindowScroll } from \"react-use\";\r\n+import { useEffect, useRef, useState } from \"react\";\r\n+import { TiLocationArrow } from \"react-icons/ti\";\r\n+\r\n+import Button from \"./Button\";\r\n+\r\n+const navItems = [\"Nexus\", \"Vault\", \"Prologue\", \"About\", \"Contact\"];\r\n+\r\n+const NavBar = () => {\r\n+  // State for toggling audio and visual indicator\r\n+  const [isAudioPlaying, setIsAudioPlaying] = useState(false);\r\n+  const [isIndicatorActive, setIsIndicatorActive] = useState(false);\r\n+\r\n+  // Refs for audio and navigation container\r\n+  const audioElementRef = useRef(null);\r\n+  const navContainerRef = useRef(null);\r\n+\r\n+  const { y: currentScrollY } = useWindowScroll();\r\n+  const [isNavVisible, setIsNavVisible] = useState(true);\r\n+  const [lastScrollY, setLastScrollY] = useState(0);\r\n+\r\n+  // Toggle audio and visual indicator\r\n+  const toggleAudioIndicator = () => {\r\n+    setIsAudioPlaying((prev) => !prev);\r\n+    setIsIndicatorActive((prev) => !prev);\r\n+  };\r\n+\r\n+  // Manage audio playback\r\n+  useEffect(() => {\r\n+    if (isAudioPlaying) {\r\n+      audioElementRef.current.play();\r\n+    } else {\r\n+      audioElementRef.current.pause();\r\n+    }\r\n+  }, [isAudioPlaying]);\r\n+\r\n+  useEffect(() => {\r\n+    if (currentScrollY === 0) {\r\n+      // Topmost position: show navbar without floating-nav\r\n+      setIsNavVisible(true);\r\n+      navContainerRef.current.classList.remove(\"floating-nav\");\r\n+    } else if (currentScrollY > lastScrollY) {\r\n+      // Scrolling down: hide navbar and apply floating-nav\r\n+      setIsNavVisible(false);\r\n+      navContainerRef.current.classList.add(\"floating-nav\");\r\n+    } else if (currentScrollY < lastScrollY) {\r\n+      // Scrolling up: show navbar with floating-nav\r\n+      setIsNavVisible(true);\r\n+      navContainerRef.current.classList.add(\"floating-nav\");\r\n+    }\r\n+\r\n+    setLastScrollY(currentScrollY);\r\n+  }, [currentScrollY, lastScrollY]);\r\n+\r\n+  useEffect(() => {\r\n+    gsap.to(navContainerRef.current, {\r\n+      y: isNavVisible ? 0 : -100,\r\n+      opacity: isNavVisible ? 1 : 0,\r\n+      duration: 0.2,\r\n+    });\r\n+  }, [isNavVisible]);\r\n+\r\n+  return (\r\n+    <div\r\n+      ref={navContainerRef}\r\n+      className=\"fixed inset-x-0 top-4 z-50 h-16 border-none transition-all duration-700 sm:inset-x-6\"\r\n+    >\r\n+      <header className=\"absolute top-1/2 w-full -translate-y-1/2\">\r\n+        <nav className=\"flex size-full items-center justify-between p-4 bg-orange-500\">\r\n+          {/* Logo and Product button */}\r\n+          <div className=\"flex items-center gap-7\">\r\n+            <img src=\"/img/logo.png\" alt=\"logo\" className=\"w-10\" />\r\n+          </div>\r\n+\r\n+          {/* Navigation Links and Audio Button */}\r\n+          <div className=\"flex h-full items-center\">\r\n+            {/* <div className=\"hidden md:block\">\r\n+              {navItems.map((item, index) => (\r\n+                <a\r\n+                  key={index}\r\n+                  href={`#${item.toLowerCase()}`}\r\n+                  className=\"nav-hover-btn\"\r\n+                >\r\n+                  {item}\r\n+                </a>\r\n+              ))}\r\n+            </div> */}\r\n+\r\n+            <Button\r\n+              id=\"product-button\"\r\n+              title=\"Products\"\r\n+              rightIcon={<TiLocationArrow />}\r\n+              containerClass=\"bg-blue-50 md:flex hidden items-center justify-center gap-1\"\r\n+            />\r\n+\r\n+            <button\r\n+              onClick={toggleAudioIndicator}\r\n+              className=\"ml-10 flex items-center space-x-0.5\"\r\n+            >\r\n+              <audio\r\n+                ref={audioElementRef}\r\n+                className=\"hidden\"\r\n+                src=\"/audio/loop.mp3\"\r\n+                loop\r\n+              />\r\n+              {[1, 2, 3, 4].map((bar) => (\r\n+                <div\r\n+                  key={bar}\r\n+                  className={clsx(\"indicator-line\", {\r\n+                    active: isIndicatorActive,\r\n+                  })}\r\n+                  style={{\r\n+                    animationDelay: `${bar * 0.1}s`,\r\n+                  }}\r\n+                />\r\n+              ))}\r\n+            </button>\r\n+          </div>\r\n+        </nav>\r\n+      </header>\r\n+    </div>\r\n+  );\r\n+};\r\n+\r\n+export default NavBar;\r\n"
                },
                {
                    "date": 1735258204080,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -67,262 +67,8 @@\n       ref={navContainerRef}\r\n       className=\"fixed inset-x-0 top-4 z-50 h-16 border-none transition-all duration-700 sm:inset-x-6\"\r\n     >\r\n       <header className=\"absolute top-1/2 w-full -translate-y-1/2\">\r\n-        <nav className=\"flex size-full items-center justify-between p-4 bg-orange-500\">\r\n-          {/* Logo and Product button */}\r\n-          <div className=\"flex items-center gap-7\">\r\n-            <img src=\"/img/logo.png\" alt=\"logo\" className=\"w-10\" />\r\n-          </div>\r\n-\r\n-          {/* Navigation Links and Audio Button */}\r\n-          <div className=\"flex h-full items-center\">\r\n-            {/* <div className=\"hidden md:block\">\r\n-              {navItems.map((item, index) => (\r\n-                <a\r\n-                  key={index}\r\n-                  href={`#${item.toLowerCase()}`}\r\n-                  className=\"nav-hover-btn\"\r\n-                >\r\n-                  {item}\r\n-                </a>\r\n-              ))}\r\n-            </div> */}\r\n-\r\n-            <Button\r\n-              id=\"product-button\"\r\n-              title=\"Products\"\r\n-              rightIcon={<TiLocationArrow />}\r\n-              containerClass=\"bg-blue-50 md:flex hidden items-center justify-center gap-1\"\r\n-            />\r\n-\r\n-            <button\r\n-              onClick={toggleAudioIndicator}\r\n-              className=\"ml-10 flex items-center space-x-0.5\"\r\n-            >\r\n-              <audio\r\n-                ref={audioElementRef}\r\n-                className=\"hidden\"\r\n-                src=\"/audio/loop.mp3\"\r\n-                loop\r\n-              />\r\n-              {[1, 2, 3, 4].map((bar) => (\r\n-                <div\r\n-                  key={bar}\r\n-                  className={clsx(\"indicator-line\", {\r\n-                    active: isIndicatorActive,\r\n-                  })}\r\n-                  style={{\r\n-                    animationDelay: `${bar * 0.1}s`,\r\n-                  }}\r\n-                />\r\n-              ))}\r\n-            </button>\r\n-          </div>\r\n-        </nav>\r\n-      </header>\r\n-    </div>\r\n-  );\r\n-};\r\n-\r\n-export default NavBar;\r\n-import clsx from \"clsx\";\r\n-import gsap from \"gsap\";\r\n-import { useWindowScroll } from \"react-use\";\r\n-import { useEffect, useRef, useState } from \"react\";\r\n-import { TiLocationArrow } from \"react-icons/ti\";\r\n-\r\n-import Button from \"./Button\";\r\n-\r\n-const navItems = [\"Nexus\", \"Vault\", \"Prologue\", \"About\", \"Contact\"];\r\n-\r\n-const NavBar = () => {\r\n-  // State for toggling audio and visual indicator\r\n-  const [isAudioPlaying, setIsAudioPlaying] = useState(false);\r\n-  const [isIndicatorActive, setIsIndicatorActive] = useState(false);\r\n-\r\n-  // Refs for audio and navigation container\r\n-  const audioElementRef = useRef(null);\r\n-  const navContainerRef = useRef(null);\r\n-\r\n-  const { y: currentScrollY } = useWindowScroll();\r\n-  const [isNavVisible, setIsNavVisible] = useState(true);\r\n-  const [lastScrollY, setLastScrollY] = useState(0);\r\n-\r\n-  // Toggle audio and visual indicator\r\n-  const toggleAudioIndicator = () => {\r\n-    setIsAudioPlaying((prev) => !prev);\r\n-    setIsIndicatorActive((prev) => !prev);\r\n-  };\r\n-\r\n-  // Manage audio playback\r\n-  useEffect(() => {\r\n-    if (isAudioPlaying) {\r\n-      audioElementRef.current.play();\r\n-    } else {\r\n-      audioElementRef.current.pause();\r\n-    }\r\n-  }, [isAudioPlaying]);\r\n-\r\n-  useEffect(() => {\r\n-    if (currentScrollY === 0) {\r\n-      // Topmost position: show navbar without floating-nav\r\n-      setIsNavVisible(true);\r\n-      navContainerRef.current.classList.remove(\"floating-nav\");\r\n-    } else if (currentScrollY > lastScrollY) {\r\n-      // Scrolling down: hide navbar and apply floating-nav\r\n-      setIsNavVisible(false);\r\n-      navContainerRef.current.classList.add(\"floating-nav\");\r\n-    } else if (currentScrollY < lastScrollY) {\r\n-      // Scrolling up: show navbar with floating-nav\r\n-      setIsNavVisible(true);\r\n-      navContainerRef.current.classList.add(\"floating-nav\");\r\n-    }\r\n-\r\n-    setLastScrollY(currentScrollY);\r\n-  }, [currentScrollY, lastScrollY]);\r\n-\r\n-  useEffect(() => {\r\n-    gsap.to(navContainerRef.current, {\r\n-      y: isNavVisible ? 0 : -100,\r\n-      opacity: isNavVisible ? 1 : 0,\r\n-      duration: 0.2,\r\n-    });\r\n-  }, [isNavVisible]);\r\n-\r\n-  return (\r\n-    <div\r\n-      ref={navContainerRef}\r\n-      className=\"fixed inset-x-0 top-4 z-50 h-16 border-none transition-all duration-700 sm:inset-x-6\"\r\n-    >\r\n-      <header className=\"absolute top-1/2 w-full -translate-y-1/2\">\r\n-        <nav className=\"flex size-full items-center justify-between p-4 bg-orange-500 opacity-50\">\r\n-          {/* Logo and Product button */}\r\n-          <div className=\"flex items-center gap-7\">\r\n-            <img src=\"/img/logo.png\" alt=\"logo\" className=\"w-10\" />\r\n-          </div>\r\n-\r\n-          {/* Navigation Links and Audio Button */}\r\n-          <div className=\"flex h-full items-center\">\r\n-            {/* <div className=\"hidden md:block\">\r\n-              {navItems.map((item, index) => (\r\n-                <a\r\n-                  key={index}\r\n-                  href={`#${item.toLowerCase()}`}\r\n-                  className=\"nav-hover-btn\"\r\n-                >\r\n-                  {item}\r\n-                </a>\r\n-              ))}\r\n-            </div> */}\r\n-\r\n-            <Button\r\n-              id=\"product-button\"\r\n-              title=\"Products\"\r\n-              rightIcon={<TiLocationArrow />}\r\n-              containerClass=\"bg-blue-50 md:flex hidden items-center justify-center gap-1\"\r\n-            />\r\n-\r\n-            <button\r\n-              onClick={toggleAudioIndicator}\r\n-              className=\"ml-10 flex items-center space-x-0.5\"\r\n-            >\r\n-              <audio\r\n-                ref={audioElementRef}\r\n-                className=\"hidden\"\r\n-                src=\"/audio/loop.mp3\"\r\n-                loop\r\n-              />\r\n-              {[1, 2, 3, 4].map((bar) => (\r\n-                <div\r\n-                  key={bar}\r\n-                  className={clsx(\"indicator-line\", {\r\n-                    active: isIndicatorActive,\r\n-                  })}\r\n-                  style={{\r\n-                    animationDelay: `${bar * 0.1}s`,\r\n-                  }}\r\n-                />\r\n-              ))}\r\n-            </button>\r\n-          </div>\r\n-        </nav>\r\n-      </header>\r\n-    </div>\r\n-  );\r\n-};\r\n-\r\n-export default NavBar;\r\n-import clsx from \"clsx\";\r\n-import gsap from \"gsap\";\r\n-import { useWindowScroll } from \"react-use\";\r\n-import { useEffect, useRef, useState } from \"react\";\r\n-import { TiLocationArrow } from \"react-icons/ti\";\r\n-\r\n-import Button from \"./Button\";\r\n-\r\n-const navItems = [\"Nexus\", \"Vault\", \"Prologue\", \"About\", \"Contact\"];\r\n-\r\n-const NavBar = () => {\r\n-  // State for toggling audio and visual indicator\r\n-  const [isAudioPlaying, setIsAudioPlaying] = useState(false);\r\n-  const [isIndicatorActive, setIsIndicatorActive] = useState(false);\r\n-\r\n-  // Refs for audio and navigation container\r\n-  const audioElementRef = useRef(null);\r\n-  const navContainerRef = useRef(null);\r\n-\r\n-  const { y: currentScrollY } = useWindowScroll();\r\n-  const [isNavVisible, setIsNavVisible] = useState(true);\r\n-  const [lastScrollY, setLastScrollY] = useState(0);\r\n-\r\n-  // Toggle audio and visual indicator\r\n-  const toggleAudioIndicator = () => {\r\n-    setIsAudioPlaying((prev) => !prev);\r\n-    setIsIndicatorActive((prev) => !prev);\r\n-  };\r\n-\r\n-  // Manage audio playback\r\n-  useEffect(() => {\r\n-    if (isAudioPlaying) {\r\n-      audioElementRef.current.play();\r\n-    } else {\r\n-      audioElementRef.current.pause();\r\n-    }\r\n-  }, [isAudioPlaying]);\r\n-\r\n-  useEffect(() => {\r\n-    if (currentScrollY === 0) {\r\n-      // Topmost position: show navbar without floating-nav\r\n-      setIsNavVisible(true);\r\n-      navContainerRef.current.classList.remove(\"floating-nav\");\r\n-    } else if (currentScrollY > lastScrollY) {\r\n-      // Scrolling down: hide navbar and apply floating-nav\r\n-      setIsNavVisible(false);\r\n-      navContainerRef.current.classList.add(\"floating-nav\");\r\n-    } else if (currentScrollY < lastScrollY) {\r\n-      // Scrolling up: show navbar with floating-nav\r\n-      setIsNavVisible(true);\r\n-      navContainerRef.current.classList.add(\"floating-nav\");\r\n-    }\r\n-\r\n-    setLastScrollY(currentScrollY);\r\n-  }, [currentScrollY, lastScrollY]);\r\n-\r\n-  useEffect(() => {\r\n-    gsap.to(navContainerRef.current, {\r\n-      y: isNavVisible ? 0 : -100,\r\n-      opacity: isNavVisible ? 1 : 0,\r\n-      duration: 0.2,\r\n-    });\r\n-  }, [isNavVisible]);\r\n-\r\n-  return (\r\n-    <div\r\n-      ref={navContainerRef}\r\n-      className=\"fixed inset-x-0 top-4 z-50 h-16 border-none transition-all duration-700 sm:inset-x-6\"\r\n-    >\r\n-      <header className=\"absolute top-1/2 w-full -translate-y-1/2 bg-orange-500 opacity-50\">\r\n         <nav className=\"flex size-full items-center justify-between p-4\">\r\n           {/* Logo and Product button */}\r\n           <div className=\"flex items-center gap-7\">\r\n             <img src=\"/img/logo.png\" alt=\"logo\" className=\"w-10\" />\r\n@@ -345,9 +91,9 @@\n             <Button\r\n               id=\"product-button\"\r\n               title=\"Products\"\r\n               rightIcon={<TiLocationArrow />}\r\n-              containerClass=\"bg-blue-50 md:flex hidden items-center justify-center gap-1\"\r\n+              containerClass=\"bg-blue-50 md:flex hidden items-center justify-center gap-1 bg-orange-500\"\r\n             />\r\n \r\n             <button\r\n               onClick={toggleAudioIndicator}\r\n"
                },
                {
                    "date": 1735258223104,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -91,9 +91,9 @@\n             <Button\r\n               id=\"product-button\"\r\n               title=\"Products\"\r\n               rightIcon={<TiLocationArrow />}\r\n-              containerClass=\"bg-blue-50 md:flex hidden items-center justify-center gap-1 bg-orange-500\"\r\n+              containerClass=\"md:flex hidden items-center justify-center gap-1 bg-orange-500 text-white\"\r\n             />\r\n \r\n             <button\r\n               onClick={toggleAudioIndicator}\r\n"
                },
                {
                    "date": 1735258238145,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -89,9 +89,9 @@\n             </div> */}\r\n \r\n             <Button\r\n               id=\"product-button\"\r\n-              title=\"Products\"\r\n+              title=\"Back to Home\"\r\n               rightIcon={<TiLocationArrow />}\r\n               containerClass=\"md:flex hidden items-center justify-center gap-1 bg-orange-500 text-white\"\r\n             />\r\n \r\n"
                },
                {
                    "date": 1735258268866,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -96,9 +96,9 @@\n             />\r\n \r\n             <button\r\n               onClick={toggleAudioIndicator}\r\n-              className=\"ml-10 flex items-center space-x-0.5\"\r\n+              className=\"ml-10 flex items-center space-x-0.5 text-orange-500\"\r\n             >\r\n               <audio\r\n                 ref={audioElementRef}\r\n                 className=\"hidden\"\r\n"
                },
                {
                    "date": 1735258332802,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -96,9 +96,9 @@\n             />\r\n \r\n             <button\r\n               onClick={toggleAudioIndicator}\r\n-              className=\"ml-10 flex items-center space-x-0.5 text-orange-500\"\r\n+              className=\"ml-10 flex items-center space-x-0.5\"\r\n             >\r\n               <audio\r\n                 ref={audioElementRef}\r\n                 className=\"hidden\"\r\n@@ -109,8 +109,9 @@\n                 <div\r\n                   key={bar}\r\n                   className={clsx(\"indicator-line\", {\r\n                     active: isIndicatorActive,\r\n+                    \"text-orange-500\": isIndicatorActive\r\n                   })}\r\n                   style={{\r\n                     animationDelay: `${bar * 0.1}s`,\r\n                   }}\r\n"
                },
                {
                    "date": 1735258447078,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -109,12 +109,11 @@\n                 <div\r\n                   key={bar}\r\n                   className={clsx(\"indicator-line\", {\r\n                     active: isIndicatorActive,\r\n-                    \"text-orange-500\": isIndicatorActive\r\n                   })}\r\n                   style={{\r\n-                    animationDelay: `${bar * 0.1}s`,\r\n+                    color: isIndicatorActive ? '#f97316' : 'currentColor'\r\n                   }}\r\n                 />\r\n               ))}\r\n             </button>\r\n"
                },
                {
                    "date": 1735258464328,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -110,11 +110,8 @@\n                   key={bar}\r\n                   className={clsx(\"indicator-line\", {\r\n                     active: isIndicatorActive,\r\n                   })}\r\n-                  style={{\r\n-                    color: isIndicatorActive ? '#f97316' : 'currentColor'\r\n-                  }}\r\n                 />\r\n               ))}\r\n             </button>\r\n           </div>\r\n"
                },
                {
                    "date": 1735258475885,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -110,8 +110,11 @@\n                   key={bar}\r\n                   className={clsx(\"indicator-line\", {\r\n                     active: isIndicatorActive,\r\n                   })}\r\n+                  style={{\r\n+                    animationDelay: `${bar * 0.1}s`,\r\n+                  }}\r\n                 />\r\n               ))}\r\n             </button>\r\n           </div>\r\n"
                },
                {
                    "date": 1735258527216,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -112,8 +112,9 @@\n                     active: isIndicatorActive,\r\n                   })}\r\n                   style={{\r\n                     animationDelay: `${bar * 0.1}s`,\r\n+                    color: \"#f97316\",\r\n                   }}\r\n                 />\r\n               ))}\r\n             </button>\r\n"
                },
                {
                    "date": 1735258595100,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,129 @@\n+import clsx from \"clsx\";\r\n+import gsap from \"gsap\";\r\n+import { useWindowScroll } from \"react-use\";\r\n+import { useEffect, useRef, useState } from \"react\";\r\n+import { TiLocationArrow } from \"react-icons/ti\";\r\n+\r\n+import Button from \"./Button\";\r\n+\r\n+const navItems = [\"Nexus\", \"Vault\", \"Prologue\", \"About\", \"Contact\"];\r\n+\r\n+const NavBar = () => {\r\n+  // State for toggling audio and visual indicator\r\n+  const [isAudioPlaying, setIsAudioPlaying] = useState(false);\r\n+  const [isIndicatorActive, setIsIndicatorActive] = useState(false);\r\n+\r\n+  // Refs for audio and navigation container\r\n+  const audioElementRef = useRef(null);\r\n+  const navContainerRef = useRef(null);\r\n+\r\n+  const { y: currentScrollY } = useWindowScroll();\r\n+  const [isNavVisible, setIsNavVisible] = useState(true);\r\n+  const [lastScrollY, setLastScrollY] = useState(0);\r\n+\r\n+  // Toggle audio and visual indicator\r\n+  const toggleAudioIndicator = () => {\r\n+    setIsAudioPlaying((prev) => !prev);\r\n+    setIsIndicatorActive((prev) => !prev);\r\n+  };\r\n+\r\n+  // Manage audio playback\r\n+  useEffect(() => {\r\n+    if (isAudioPlaying) {\r\n+      audioElementRef.current.play();\r\n+    } else {\r\n+      audioElementRef.current.pause();\r\n+    }\r\n+  }, [isAudioPlaying]);\r\n+\r\n+  useEffect(() => {\r\n+    if (currentScrollY === 0) {\r\n+      // Topmost position: show navbar without floating-nav\r\n+      setIsNavVisible(true);\r\n+      navContainerRef.current.classList.remove(\"floating-nav\");\r\n+    } else if (currentScrollY > lastScrollY) {\r\n+      // Scrolling down: hide navbar and apply floating-nav\r\n+      setIsNavVisible(false);\r\n+      navContainerRef.current.classList.add(\"floating-nav\");\r\n+    } else if (currentScrollY < lastScrollY) {\r\n+      // Scrolling up: show navbar with floating-nav\r\n+      setIsNavVisible(true);\r\n+      navContainerRef.current.classList.add(\"floating-nav\");\r\n+    }\r\n+\r\n+    setLastScrollY(currentScrollY);\r\n+  }, [currentScrollY, lastScrollY]);\r\n+\r\n+  useEffect(() => {\r\n+    gsap.to(navContainerRef.current, {\r\n+      y: isNavVisible ? 0 : -100,\r\n+      opacity: isNavVisible ? 1 : 0,\r\n+      duration: 0.2,\r\n+    });\r\n+  }, [isNavVisible]);\r\n+\r\n+  return (\r\n+    <div\r\n+      ref={navContainerRef}\r\n+      className=\"fixed inset-x-0 top-4 z-50 h-16 border-none transition-all duration-700 sm:inset-x-6\"\r\n+    >\r\n+      <header className=\"absolute top-1/2 w-full -translate-y-1/2\">\r\n+        <nav className=\"flex size-full items-center justify-between p-4\">\r\n+          {/* Logo and Product button */}\r\n+          <div className=\"flex items-center gap-7\">\r\n+            <img src=\"/img/logo.png\" alt=\"logo\" className=\"w-10\" />\r\n+          </div>\r\n+\r\n+          {/* Navigation Links and Audio Button */}\r\n+          <div className=\"flex h-full items-center\">\r\n+            {/* <div className=\"hidden md:block\">\r\n+              {navItems.map((item, index) => (\r\n+                <a\r\n+                  key={index}\r\n+                  href={`#${item.toLowerCase()}`}\r\n+                  className=\"nav-hover-btn\"\r\n+                >\r\n+                  {item}\r\n+                </a>\r\n+              ))}\r\n+            </div> */}\r\n+\r\n+            <Button\r\n+              id=\"product-button\"\r\n+              title=\"Back to Home\"\r\n+              rightIcon={<TiLocationArrow />}\r\n+              containerClass=\"md:flex hidden items-center justify-center gap-1 bg-orange-500 text-white\"\r\n+            />\r\n+\r\n+            <button\r\n+              onClick={toggleAudioIndicator}\r\n+              className=\"ml-10 flex items-center space-x-0.5\"\r\n+            >\r\n+              <audio\r\n+                ref={audioElementRef}\r\n+                className=\"hidden\"\r\n+                src=\"/audio/loop.mp3\"\r\n+                loop\r\n+              />\r\n+              {[1, 2, 3, 4].map((bar) => (\r\n+                <div\r\n+                  key={bar}\r\n+                  className={clsx(\"indicator-line\", {\r\n+                    active: isIndicatorActive,\r\n+                  })}\r\n+                  style={{\r\n+                    animationDelay: `${bar * 0.1}s`,\r\n+                    color: \"#f97316\",\r\n+                    backgroundColor: \"#f97316\",\r\n+                  }}\r\n+                />\r\n+              ))}\r\n+            </button>\r\n+          </div>\r\n+        </nav>\r\n+      </header>\r\n+    </div>\r\n+  );\r\n+};\r\n+\r\n+export default NavBar;\r\n"
                },
                {
                    "date": 1735258614982,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -112,10 +112,9 @@\n                     active: isIndicatorActive,\r\n                   })}\r\n                   style={{\r\n                     animationDelay: `${bar * 0.1}s`,\r\n-                    color: \"#f97316\",\r\n-                    backgroundColor: \"#f97316\",\r\n+                    backgroundColor: \"#e27c2b\",\r\n                   }}\r\n                 />\r\n               ))}\r\n             </button>\r\n@@ -126,132 +125,4 @@\n   );\r\n };\r\n \r\n export default NavBar;\r\n-import clsx from \"clsx\";\r\n-import gsap from \"gsap\";\r\n-import { useWindowScroll } from \"react-use\";\r\n-import { useEffect, useRef, useState } from \"react\";\r\n-import { TiLocationArrow } from \"react-icons/ti\";\r\n-\r\n-import Button from \"./Button\";\r\n-\r\n-const navItems = [\"Nexus\", \"Vault\", \"Prologue\", \"About\", \"Contact\"];\r\n-\r\n-const NavBar = () => {\r\n-  // State for toggling audio and visual indicator\r\n-  const [isAudioPlaying, setIsAudioPlaying] = useState(false);\r\n-  const [isIndicatorActive, setIsIndicatorActive] = useState(false);\r\n-\r\n-  // Refs for audio and navigation container\r\n-  const audioElementRef = useRef(null);\r\n-  const navContainerRef = useRef(null);\r\n-\r\n-  const { y: currentScrollY } = useWindowScroll();\r\n-  const [isNavVisible, setIsNavVisible] = useState(true);\r\n-  const [lastScrollY, setLastScrollY] = useState(0);\r\n-\r\n-  // Toggle audio and visual indicator\r\n-  const toggleAudioIndicator = () => {\r\n-    setIsAudioPlaying((prev) => !prev);\r\n-    setIsIndicatorActive((prev) => !prev);\r\n-  };\r\n-\r\n-  // Manage audio playback\r\n-  useEffect(() => {\r\n-    if (isAudioPlaying) {\r\n-      audioElementRef.current.play();\r\n-    } else {\r\n-      audioElementRef.current.pause();\r\n-    }\r\n-  }, [isAudioPlaying]);\r\n-\r\n-  useEffect(() => {\r\n-    if (currentScrollY === 0) {\r\n-      // Topmost position: show navbar without floating-nav\r\n-      setIsNavVisible(true);\r\n-      navContainerRef.current.classList.remove(\"floating-nav\");\r\n-    } else if (currentScrollY > lastScrollY) {\r\n-      // Scrolling down: hide navbar and apply floating-nav\r\n-      setIsNavVisible(false);\r\n-      navContainerRef.current.classList.add(\"floating-nav\");\r\n-    } else if (currentScrollY < lastScrollY) {\r\n-      // Scrolling up: show navbar with floating-nav\r\n-      setIsNavVisible(true);\r\n-      navContainerRef.current.classList.add(\"floating-nav\");\r\n-    }\r\n-\r\n-    setLastScrollY(currentScrollY);\r\n-  }, [currentScrollY, lastScrollY]);\r\n-\r\n-  useEffect(() => {\r\n-    gsap.to(navContainerRef.current, {\r\n-      y: isNavVisible ? 0 : -100,\r\n-      opacity: isNavVisible ? 1 : 0,\r\n-      duration: 0.2,\r\n-    });\r\n-  }, [isNavVisible]);\r\n-\r\n-  return (\r\n-    <div\r\n-      ref={navContainerRef}\r\n-      className=\"fixed inset-x-0 top-4 z-50 h-16 border-none transition-all duration-700 sm:inset-x-6\"\r\n-    >\r\n-      <header className=\"absolute top-1/2 w-full -translate-y-1/2\">\r\n-        <nav className=\"flex size-full items-center justify-between p-4\">\r\n-          {/* Logo and Product button */}\r\n-          <div className=\"flex items-center gap-7\">\r\n-            <img src=\"/img/logo.png\" alt=\"logo\" className=\"w-10\" />\r\n-          </div>\r\n-\r\n-          {/* Navigation Links and Audio Button */}\r\n-          <div className=\"flex h-full items-center\">\r\n-            {/* <div className=\"hidden md:block\">\r\n-              {navItems.map((item, index) => (\r\n-                <a\r\n-                  key={index}\r\n-                  href={`#${item.toLowerCase()}`}\r\n-                  className=\"nav-hover-btn\"\r\n-                >\r\n-                  {item}\r\n-                </a>\r\n-              ))}\r\n-            </div> */}\r\n-\r\n-            <Button\r\n-              id=\"product-button\"\r\n-              title=\"Back to Home\"\r\n-              rightIcon={<TiLocationArrow />}\r\n-              containerClass=\"md:flex hidden items-center justify-center gap-1 bg-orange-500 text-white\"\r\n-            />\r\n-\r\n-            <button\r\n-              onClick={toggleAudioIndicator}\r\n-              className=\"ml-10 flex items-center space-x-0.5\"\r\n-            >\r\n-              <audio\r\n-                ref={audioElementRef}\r\n-                className=\"hidden\"\r\n-                src=\"/audio/loop.mp3\"\r\n-                loop\r\n-              />\r\n-              {[1, 2, 3, 4].map((bar) => (\r\n-                <div\r\n-                  key={bar}\r\n-                  className={clsx(\"indicator-line\", {\r\n-                    active: isIndicatorActive,\r\n-                  })}\r\n-                  style={{\r\n-                    animationDelay: `${bar * 0.1}s`,\r\n-                    color: \"#f97316\",\r\n-                  }}\r\n-                />\r\n-              ))}\r\n-            </button>\r\n-          </div>\r\n-        </nav>\r\n-      </header>\r\n-    </div>\r\n-  );\r\n-};\r\n-\r\n-export default NavBar;\r\n"
                },
                {
                    "date": 1735259144212,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,128 @@\n+import clsx from \"clsx\";\r\n+import gsap from \"gsap\";\r\n+import { useWindowScroll } from \"react-use\";\r\n+import { useEffect, useRef, useState } from \"react\";\r\n+import { TiLocationArrow } from \"react-icons/ti\";\r\n+\r\n+import Button from \"./Button\";\r\n+\r\n+// const navItems = [\"Nexus\", \"Vault\", \"Prologue\", \"About\", \"Contact\"];\r\n+\r\n+const NavBar = () => {\r\n+  // State for toggling audio and visual indicator\r\n+  const [isAudioPlaying, setIsAudioPlaying] = useState(false);\r\n+  const [isIndicatorActive, setIsIndicatorActive] = useState(false);\r\n+\r\n+  // Refs for audio and navigation container\r\n+  const audioElementRef = useRef(null);\r\n+  const navContainerRef = useRef(null);\r\n+\r\n+  const { y: currentScrollY } = useWindowScroll();\r\n+  const [isNavVisible, setIsNavVisible] = useState(true);\r\n+  const [lastScrollY, setLastScrollY] = useState(0);\r\n+\r\n+  // Toggle audio and visual indicator\r\n+  const toggleAudioIndicator = () => {\r\n+    setIsAudioPlaying((prev) => !prev);\r\n+    setIsIndicatorActive((prev) => !prev);\r\n+  };\r\n+\r\n+  // Manage audio playback\r\n+  useEffect(() => {\r\n+    if (isAudioPlaying) {\r\n+      audioElementRef.current.play();\r\n+    } else {\r\n+      audioElementRef.current.pause();\r\n+    }\r\n+  }, [isAudioPlaying]);\r\n+\r\n+  useEffect(() => {\r\n+    if (currentScrollY === 0) {\r\n+      // Topmost position: show navbar without floating-nav\r\n+      setIsNavVisible(true);\r\n+      navContainerRef.current.classList.remove(\"floating-nav\");\r\n+    } else if (currentScrollY > lastScrollY) {\r\n+      // Scrolling down: hide navbar and apply floating-nav\r\n+      setIsNavVisible(false);\r\n+      navContainerRef.current.classList.add(\"floating-nav\");\r\n+    } else if (currentScrollY < lastScrollY) {\r\n+      // Scrolling up: show navbar with floating-nav\r\n+      setIsNavVisible(true);\r\n+      navContainerRef.current.classList.add(\"floating-nav\");\r\n+    }\r\n+\r\n+    setLastScrollY(currentScrollY);\r\n+  }, [currentScrollY, lastScrollY]);\r\n+\r\n+  useEffect(() => {\r\n+    gsap.to(navContainerRef.current, {\r\n+      y: isNavVisible ? 0 : -100,\r\n+      opacity: isNavVisible ? 1 : 0,\r\n+      duration: 0.2,\r\n+    });\r\n+  }, [isNavVisible]);\r\n+\r\n+  return (\r\n+    <div\r\n+      ref={navContainerRef}\r\n+      className=\"fixed inset-x-0 top-4 z-50 h-16 border-none transition-all duration-700 sm:inset-x-6\"\r\n+    >\r\n+      <header className=\"absolute top-1/2 w-full -translate-y-1/2\">\r\n+        <nav className=\"flex size-full items-center justify-between p-4\">\r\n+          {/* Logo and Product button */}\r\n+          <div className=\"flex items-center gap-7\">\r\n+            <img src=\"/img/logo.png\" alt=\"logo\" className=\"w-10\" />\r\n+          </div>\r\n+\r\n+          {/* Navigation Links and Audio Button */}\r\n+          <div className=\"flex h-full items-center\">\r\n+            {/* <div className=\"hidden md:block\">\r\n+              {navItems.map((item, index) => (\r\n+                <a\r\n+                  key={index}\r\n+                  href={`#${item.toLowerCase()}`}\r\n+                  className=\"nav-hover-btn\"\r\n+                >\r\n+                  {item}\r\n+                </a>\r\n+              ))}\r\n+            </div> */}\r\n+\r\n+            <Button\r\n+              id=\"product-button\"\r\n+              title=\"Back to Home\"\r\n+              rightIcon={<TiLocationArrow />}\r\n+              containerClass=\"md:flex hidden items-center justify-center gap-1 bg-orange-500 text-white\"\r\n+            />\r\n+\r\n+            <button\r\n+              onClick={toggleAudioIndicator}\r\n+              className=\"ml-10 flex items-center space-x-0.5\"\r\n+            >\r\n+              <audio\r\n+                ref={audioElementRef}\r\n+                className=\"hidden\"\r\n+                src=\"/audio/loop.mp3\"\r\n+                loop\r\n+              />\r\n+              {[1, 2, 3, 4].map((bar) => (\r\n+                <div\r\n+                  key={bar}\r\n+                  className={clsx(\"indicator-line\", {\r\n+                    active: isIndicatorActive,\r\n+                  })}\r\n+                  style={{\r\n+                    animationDelay: `${bar * 0.1}s`,\r\n+                    backgroundColor: \"#e27c2b\",\r\n+                  }}\r\n+                />\r\n+              ))}\r\n+            </button>\r\n+          </div>\r\n+        </nav>\r\n+      </header>\r\n+    </div>\r\n+  );\r\n+};\r\n+\r\n+export default NavBar;\r\n"
                },
                {
                    "date": 1735259177536,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,128 @@\n+import clsx from \"clsx\";\r\n+import gsap from \"gsap\";\r\n+import { useWindowScroll } from \"react-use\";\r\n+import { useEffect, useRef, useState } from \"react\";\r\n+import { TiLocationArrow } from \"react-icons/ti\";\r\n+\r\n+import Button from \"./Button\";\r\n+\r\n+// const navItems = [\"Nexus\", \"Vault\", \"Prologue\", \"About\", \"Contact\"];\r\n+\r\n+const NavBar = () => {\r\n+  // State for toggling audio and visual indicator\r\n+  const [isAudioPlaying, setIsAudioPlaying] = useState(false);\r\n+  const [isIndicatorActive, setIsIndicatorActive] = useState(false);\r\n+\r\n+  // Refs for audio and navigation container\r\n+  const audioElementRef = useRef(null);\r\n+  const navContainerRef = useRef(null);\r\n+\r\n+  const { y: currentScrollY } = useWindowScroll();\r\n+  const [isNavVisible, setIsNavVisible] = useState(true);\r\n+  const [lastScrollY, setLastScrollY] = useState(0);\r\n+\r\n+  // Toggle audio and visual indicator\r\n+  const toggleAudioIndicator = () => {\r\n+    setIsAudioPlaying((prev) => !prev);\r\n+    setIsIndicatorActive((prev) => !prev);\r\n+  };\r\n+\r\n+  // Manage audio playback\r\n+  useEffect(() => {\r\n+    if (isAudioPlaying) {\r\n+      audioElementRef.current.play();\r\n+    } else {\r\n+      audioElementRef.current.pause();\r\n+    }\r\n+  }, [isAudioPlaying]);\r\n+\r\n+  useEffect(() => {\r\n+    if (currentScrollY === 0) {\r\n+      // Topmost position: show navbar without floating-nav\r\n+      setIsNavVisible(true);\r\n+      navContainerRef.current.classList.remove(\"floating-nav\");\r\n+    } else if (currentScrollY > lastScrollY) {\r\n+      // Scrolling down: hide navbar and apply floating-nav\r\n+      setIsNavVisible(false);\r\n+      navContainerRef.current.classList.add(\"floating-nav\");\r\n+    } else if (currentScrollY < lastScrollY) {\r\n+      // Scrolling up: show navbar with floating-nav\r\n+      setIsNavVisible(true);\r\n+      navContainerRef.current.classList.add(\"floating-nav\");\r\n+    }\r\n+\r\n+    setLastScrollY(currentScrollY);\r\n+  }, [currentScrollY, lastScrollY]);\r\n+\r\n+  useEffect(() => {\r\n+    gsap.to(navContainerRef.current, {\r\n+      y: isNavVisible ? 0 : -100,\r\n+      opacity: isNavVisible ? 1 : 0,\r\n+      duration: 0.2,\r\n+    });\r\n+  }, [isNavVisible]);\r\n+\r\n+  return (\r\n+    <div\r\n+      ref={navContainerRef}\r\n+      className=\"fixed inset-x-0 top-4 z-50 h-16 border-none transition-all duration-700 sm:inset-x-6\"\r\n+    >\r\n+      <header className=\"absolute top-1/2 w-full -translate-y-1/2\">\r\n+        <nav className=\"flex size-full items-center justify-between p-4\">\r\n+          {/* Logo and Product button */}\r\n+          <div className=\"flex items-center gap-7\">\r\n+            <img src=\"/img/logo.png\" alt=\"logo\" className=\"w-10\" />\r\n+          </div>\r\n+\r\n+          {/* Navigation Links and Audio Button */}\r\n+          <div className=\"flex h-full items-center\">\r\n+            {/* <div className=\"hidden md:block\">\r\n+              {navItems.map((item, index) => (\r\n+                <a\r\n+                  key={index}\r\n+                  href={`#${item.toLowerCase()}`}\r\n+                  className=\"nav-hover-btn\"\r\n+                >\r\n+                  {item}\r\n+                </a>\r\n+              ))}\r\n+            </div> */}\r\n+\r\n+            <Button\r\n+              id=\"product-button\"\r\n+              title=\"Back to Home\"\r\n+              rightIcon={<TiLocationArrow />}\r\n+              containerClass=\"md:flex hidden items-center justify-center gap-1\"\r\n+            />\r\n+\r\n+            <button\r\n+              onClick={toggleAudioIndicator}\r\n+              className=\"ml-10 flex items-center space-x-0.5\"\r\n+            >\r\n+              <audio\r\n+                ref={audioElementRef}\r\n+                className=\"hidden\"\r\n+                src=\"/audio/loop.mp3\"\r\n+                loop\r\n+              />\r\n+              {[1, 2, 3, 4].map((bar) => (\r\n+                <div\r\n+                  key={bar}\r\n+                  className={clsx(\"indicator-line\", {\r\n+                    active: isIndicatorActive,\r\n+                  })}\r\n+                  style={{\r\n+                    animationDelay: `${bar * 0.1}s`,\r\n+                    backgroundColor: \"#e27c2b\",\r\n+                  }}\r\n+                />\r\n+              ))}\r\n+            </button>\r\n+          </div>\r\n+        </nav>\r\n+      </header>\r\n+    </div>\r\n+  );\r\n+};\r\n+\r\n+export default NavBar;\r\n"
                },
                {
                    "date": 1735260121449,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2,8 +2,9 @@\n import gsap from \"gsap\";\r\n import { useWindowScroll } from \"react-use\";\r\n import { useEffect, useRef, useState } from \"react\";\r\n import { TiLocationArrow } from \"react-icons/ti\";\r\n+import { HOME_URL } from \"../consts/links\";\r\n \r\n import Button from \"./Button\";\r\n \r\n // const navItems = [\"Nexus\", \"Vault\", \"Prologue\", \"About\", \"Contact\"];\r\n@@ -92,8 +93,9 @@\n               id=\"product-button\"\r\n               title=\"Back to Home\"\r\n               rightIcon={<TiLocationArrow />}\r\n               containerClass=\"md:flex hidden items-center justify-center gap-1\"\r\n+              href={HOME_URL}\r\n             />\r\n \r\n             <button\r\n               onClick={toggleAudioIndicator}\r\n@@ -125,260 +127,4 @@\n   );\r\n };\r\n \r\n export default NavBar;\r\n-import clsx from \"clsx\";\r\n-import gsap from \"gsap\";\r\n-import { useWindowScroll } from \"react-use\";\r\n-import { useEffect, useRef, useState } from \"react\";\r\n-import { TiLocationArrow } from \"react-icons/ti\";\r\n-\r\n-import Button from \"./Button\";\r\n-\r\n-// const navItems = [\"Nexus\", \"Vault\", \"Prologue\", \"About\", \"Contact\"];\r\n-\r\n-const NavBar = () => {\r\n-  // State for toggling audio and visual indicator\r\n-  const [isAudioPlaying, setIsAudioPlaying] = useState(false);\r\n-  const [isIndicatorActive, setIsIndicatorActive] = useState(false);\r\n-\r\n-  // Refs for audio and navigation container\r\n-  const audioElementRef = useRef(null);\r\n-  const navContainerRef = useRef(null);\r\n-\r\n-  const { y: currentScrollY } = useWindowScroll();\r\n-  const [isNavVisible, setIsNavVisible] = useState(true);\r\n-  const [lastScrollY, setLastScrollY] = useState(0);\r\n-\r\n-  // Toggle audio and visual indicator\r\n-  const toggleAudioIndicator = () => {\r\n-    setIsAudioPlaying((prev) => !prev);\r\n-    setIsIndicatorActive((prev) => !prev);\r\n-  };\r\n-\r\n-  // Manage audio playback\r\n-  useEffect(() => {\r\n-    if (isAudioPlaying) {\r\n-      audioElementRef.current.play();\r\n-    } else {\r\n-      audioElementRef.current.pause();\r\n-    }\r\n-  }, [isAudioPlaying]);\r\n-\r\n-  useEffect(() => {\r\n-    if (currentScrollY === 0) {\r\n-      // Topmost position: show navbar without floating-nav\r\n-      setIsNavVisible(true);\r\n-      navContainerRef.current.classList.remove(\"floating-nav\");\r\n-    } else if (currentScrollY > lastScrollY) {\r\n-      // Scrolling down: hide navbar and apply floating-nav\r\n-      setIsNavVisible(false);\r\n-      navContainerRef.current.classList.add(\"floating-nav\");\r\n-    } else if (currentScrollY < lastScrollY) {\r\n-      // Scrolling up: show navbar with floating-nav\r\n-      setIsNavVisible(true);\r\n-      navContainerRef.current.classList.add(\"floating-nav\");\r\n-    }\r\n-\r\n-    setLastScrollY(currentScrollY);\r\n-  }, [currentScrollY, lastScrollY]);\r\n-\r\n-  useEffect(() => {\r\n-    gsap.to(navContainerRef.current, {\r\n-      y: isNavVisible ? 0 : -100,\r\n-      opacity: isNavVisible ? 1 : 0,\r\n-      duration: 0.2,\r\n-    });\r\n-  }, [isNavVisible]);\r\n-\r\n-  return (\r\n-    <div\r\n-      ref={navContainerRef}\r\n-      className=\"fixed inset-x-0 top-4 z-50 h-16 border-none transition-all duration-700 sm:inset-x-6\"\r\n-    >\r\n-      <header className=\"absolute top-1/2 w-full -translate-y-1/2\">\r\n-        <nav className=\"flex size-full items-center justify-between p-4\">\r\n-          {/* Logo and Product button */}\r\n-          <div className=\"flex items-center gap-7\">\r\n-            <img src=\"/img/logo.png\" alt=\"logo\" className=\"w-10\" />\r\n-          </div>\r\n-\r\n-          {/* Navigation Links and Audio Button */}\r\n-          <div className=\"flex h-full items-center\">\r\n-            {/* <div className=\"hidden md:block\">\r\n-              {navItems.map((item, index) => (\r\n-                <a\r\n-                  key={index}\r\n-                  href={`#${item.toLowerCase()}`}\r\n-                  className=\"nav-hover-btn\"\r\n-                >\r\n-                  {item}\r\n-                </a>\r\n-              ))}\r\n-            </div> */}\r\n-\r\n-            <Button\r\n-              id=\"product-button\"\r\n-              title=\"Back to Home\"\r\n-              rightIcon={<TiLocationArrow />}\r\n-              containerClass=\"md:flex hidden items-center justify-center gap-1 bg-orange-500 text-white\"\r\n-            />\r\n-\r\n-            <button\r\n-              onClick={toggleAudioIndicator}\r\n-              className=\"ml-10 flex items-center space-x-0.5\"\r\n-            >\r\n-              <audio\r\n-                ref={audioElementRef}\r\n-                className=\"hidden\"\r\n-                src=\"/audio/loop.mp3\"\r\n-                loop\r\n-              />\r\n-              {[1, 2, 3, 4].map((bar) => (\r\n-                <div\r\n-                  key={bar}\r\n-                  className={clsx(\"indicator-line\", {\r\n-                    active: isIndicatorActive,\r\n-                  })}\r\n-                  style={{\r\n-                    animationDelay: `${bar * 0.1}s`,\r\n-                    backgroundColor: \"#e27c2b\",\r\n-                  }}\r\n-                />\r\n-              ))}\r\n-            </button>\r\n-          </div>\r\n-        </nav>\r\n-      </header>\r\n-    </div>\r\n-  );\r\n-};\r\n-\r\n-export default NavBar;\r\n-import clsx from \"clsx\";\r\n-import gsap from \"gsap\";\r\n-import { useWindowScroll } from \"react-use\";\r\n-import { useEffect, useRef, useState } from \"react\";\r\n-import { TiLocationArrow } from \"react-icons/ti\";\r\n-\r\n-import Button from \"./Button\";\r\n-\r\n-const navItems = [\"Nexus\", \"Vault\", \"Prologue\", \"About\", \"Contact\"];\r\n-\r\n-const NavBar = () => {\r\n-  // State for toggling audio and visual indicator\r\n-  const [isAudioPlaying, setIsAudioPlaying] = useState(false);\r\n-  const [isIndicatorActive, setIsIndicatorActive] = useState(false);\r\n-\r\n-  // Refs for audio and navigation container\r\n-  const audioElementRef = useRef(null);\r\n-  const navContainerRef = useRef(null);\r\n-\r\n-  const { y: currentScrollY } = useWindowScroll();\r\n-  const [isNavVisible, setIsNavVisible] = useState(true);\r\n-  const [lastScrollY, setLastScrollY] = useState(0);\r\n-\r\n-  // Toggle audio and visual indicator\r\n-  const toggleAudioIndicator = () => {\r\n-    setIsAudioPlaying((prev) => !prev);\r\n-    setIsIndicatorActive((prev) => !prev);\r\n-  };\r\n-\r\n-  // Manage audio playback\r\n-  useEffect(() => {\r\n-    if (isAudioPlaying) {\r\n-      audioElementRef.current.play();\r\n-    } else {\r\n-      audioElementRef.current.pause();\r\n-    }\r\n-  }, [isAudioPlaying]);\r\n-\r\n-  useEffect(() => {\r\n-    if (currentScrollY === 0) {\r\n-      // Topmost position: show navbar without floating-nav\r\n-      setIsNavVisible(true);\r\n-      navContainerRef.current.classList.remove(\"floating-nav\");\r\n-    } else if (currentScrollY > lastScrollY) {\r\n-      // Scrolling down: hide navbar and apply floating-nav\r\n-      setIsNavVisible(false);\r\n-      navContainerRef.current.classList.add(\"floating-nav\");\r\n-    } else if (currentScrollY < lastScrollY) {\r\n-      // Scrolling up: show navbar with floating-nav\r\n-      setIsNavVisible(true);\r\n-      navContainerRef.current.classList.add(\"floating-nav\");\r\n-    }\r\n-\r\n-    setLastScrollY(currentScrollY);\r\n-  }, [currentScrollY, lastScrollY]);\r\n-\r\n-  useEffect(() => {\r\n-    gsap.to(navContainerRef.current, {\r\n-      y: isNavVisible ? 0 : -100,\r\n-      opacity: isNavVisible ? 1 : 0,\r\n-      duration: 0.2,\r\n-    });\r\n-  }, [isNavVisible]);\r\n-\r\n-  return (\r\n-    <div\r\n-      ref={navContainerRef}\r\n-      className=\"fixed inset-x-0 top-4 z-50 h-16 border-none transition-all duration-700 sm:inset-x-6\"\r\n-    >\r\n-      <header className=\"absolute top-1/2 w-full -translate-y-1/2\">\r\n-        <nav className=\"flex size-full items-center justify-between p-4\">\r\n-          {/* Logo and Product button */}\r\n-          <div className=\"flex items-center gap-7\">\r\n-            <img src=\"/img/logo.png\" alt=\"logo\" className=\"w-10\" />\r\n-          </div>\r\n-\r\n-          {/* Navigation Links and Audio Button */}\r\n-          <div className=\"flex h-full items-center\">\r\n-            {/* <div className=\"hidden md:block\">\r\n-              {navItems.map((item, index) => (\r\n-                <a\r\n-                  key={index}\r\n-                  href={`#${item.toLowerCase()}`}\r\n-                  className=\"nav-hover-btn\"\r\n-                >\r\n-                  {item}\r\n-                </a>\r\n-              ))}\r\n-            </div> */}\r\n-\r\n-            <Button\r\n-              id=\"product-button\"\r\n-              title=\"Back to Home\"\r\n-              rightIcon={<TiLocationArrow />}\r\n-              containerClass=\"md:flex hidden items-center justify-center gap-1 bg-orange-500 text-white\"\r\n-            />\r\n-\r\n-            <button\r\n-              onClick={toggleAudioIndicator}\r\n-              className=\"ml-10 flex items-center space-x-0.5\"\r\n-            >\r\n-              <audio\r\n-                ref={audioElementRef}\r\n-                className=\"hidden\"\r\n-                src=\"/audio/loop.mp3\"\r\n-                loop\r\n-              />\r\n-              {[1, 2, 3, 4].map((bar) => (\r\n-                <div\r\n-                  key={bar}\r\n-                  className={clsx(\"indicator-line\", {\r\n-                    active: isIndicatorActive,\r\n-                  })}\r\n-                  style={{\r\n-                    animationDelay: `${bar * 0.1}s`,\r\n-                    backgroundColor: \"#e27c2b\",\r\n-                  }}\r\n-                />\r\n-              ))}\r\n-            </button>\r\n-          </div>\r\n-        </nav>\r\n-      </header>\r\n-    </div>\r\n-  );\r\n-};\r\n-\r\n-export default NavBar;\r\n"
                }
            ],
            "date": 1735257966366,
            "name": "Commit-0",
            "content": "import clsx from \"clsx\";\r\nimport gsap from \"gsap\";\r\nimport { useWindowScroll } from \"react-use\";\r\nimport { useEffect, useRef, useState } from \"react\";\r\nimport { TiLocationArrow } from \"react-icons/ti\";\r\n\r\nimport Button from \"./Button\";\r\n\r\nconst navItems = [\"Nexus\", \"Vault\", \"Prologue\", \"About\", \"Contact\"];\r\n\r\nconst NavBar = () => {\r\n  // State for toggling audio and visual indicator\r\n  const [isAudioPlaying, setIsAudioPlaying] = useState(false);\r\n  const [isIndicatorActive, setIsIndicatorActive] = useState(false);\r\n\r\n  // Refs for audio and navigation container\r\n  const audioElementRef = useRef(null);\r\n  const navContainerRef = useRef(null);\r\n\r\n  const { y: currentScrollY } = useWindowScroll();\r\n  const [isNavVisible, setIsNavVisible] = useState(true);\r\n  const [lastScrollY, setLastScrollY] = useState(0);\r\n\r\n  // Toggle audio and visual indicator\r\n  const toggleAudioIndicator = () => {\r\n    setIsAudioPlaying((prev) => !prev);\r\n    setIsIndicatorActive((prev) => !prev);\r\n  };\r\n\r\n  // Manage audio playback\r\n  useEffect(() => {\r\n    if (isAudioPlaying) {\r\n      audioElementRef.current.play();\r\n    } else {\r\n      audioElementRef.current.pause();\r\n    }\r\n  }, [isAudioPlaying]);\r\n\r\n  useEffect(() => {\r\n    if (currentScrollY === 0) {\r\n      // Topmost position: show navbar without floating-nav\r\n      setIsNavVisible(true);\r\n      navContainerRef.current.classList.remove(\"floating-nav\");\r\n    } else if (currentScrollY > lastScrollY) {\r\n      // Scrolling down: hide navbar and apply floating-nav\r\n      setIsNavVisible(false);\r\n      navContainerRef.current.classList.add(\"floating-nav\");\r\n    } else if (currentScrollY < lastScrollY) {\r\n      // Scrolling up: show navbar with floating-nav\r\n      setIsNavVisible(true);\r\n      navContainerRef.current.classList.add(\"floating-nav\");\r\n    }\r\n\r\n    setLastScrollY(currentScrollY);\r\n  }, [currentScrollY, lastScrollY]);\r\n\r\n  useEffect(() => {\r\n    gsap.to(navContainerRef.current, {\r\n      y: isNavVisible ? 0 : -100,\r\n      opacity: isNavVisible ? 1 : 0,\r\n      duration: 0.2,\r\n    });\r\n  }, [isNavVisible]);\r\n\r\n  return (\r\n    <div\r\n      ref={navContainerRef}\r\n      className=\"fixed inset-x-0 top-4 z-50 h-16 border-none transition-all duration-700 sm:inset-x-6\"\r\n    >\r\n      <header className=\"absolute top-1/2 w-full -translate-y-1/2\">\r\n        <nav className=\"flex size-full items-center justify-between p-4\">\r\n          {/* Logo and Product button */}\r\n          <div className=\"flex items-center gap-7\">\r\n            <img src=\"/img/logo.png\" alt=\"logo\" className=\"w-10\" />\r\n          </div>\r\n\r\n          {/* Navigation Links and Audio Button */}\r\n          <div className=\"flex h-full items-center\">\r\n            {/* <div className=\"hidden md:block\">\r\n              {navItems.map((item, index) => (\r\n                <a\r\n                  key={index}\r\n                  href={`#${item.toLowerCase()}`}\r\n                  className=\"nav-hover-btn\"\r\n                >\r\n                  {item}\r\n                </a>\r\n              ))}\r\n            </div> */}\r\n\r\n<Button\r\n              id=\"product-button\"\r\n              title=\"Products\"\r\n              rightIcon={<TiLocationArrow />}\r\n              containerClass=\"bg-blue-50 md:flex hidden items-center justify-center gap-1\"\r\n            />\r\n\r\n            <button\r\n              onClick={toggleAudioIndicator}\r\n              className=\"ml-10 flex items-center space-x-0.5\"\r\n            >\r\n              <audio\r\n                ref={audioElementRef}\r\n                className=\"hidden\"\r\n                src=\"/audio/loop.mp3\"\r\n                loop\r\n              />\r\n              {[1, 2, 3, 4].map((bar) => (\r\n                <div\r\n                  key={bar}\r\n                  className={clsx(\"indicator-line\", {\r\n                    active: isIndicatorActive,\r\n                  })}\r\n                  style={{\r\n                    animationDelay: `${bar * 0.1}s`,\r\n                  }}\r\n                />\r\n              ))}\r\n            </button>\r\n          </div>\r\n        </nav>\r\n      </header>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default NavBar;\r\n"
        }
    ]
}