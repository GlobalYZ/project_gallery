{
    "sourceFile": "Dockerfile",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 2,
            "patches": [
                {
                    "date": 1735254861324,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1735254870747,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,29 @@\n+# 构建阶段\r\n+FROM node:20-alpine as build\r\n+\r\n+# 设置工作目录\r\n+WORKDIR /app\r\n+\r\n+# 复制package.json和package-lock.json（如果存在）\r\n+COPY package*.json ./\r\n+\r\n+# 安装依赖\r\n+RUN npm install\r\n+\r\n+# 复制源代码\r\n+COPY . .\r\n+\r\n+# 构建应用\r\n+RUN npm run build\r\n+\r\n+# 生产阶段\r\n+FROM nginx:alpine\r\n+\r\n+# 复制构建产物到nginx目录\r\n+COPY --from=build /app/dist /usr/share/nginx/html\r\n+\r\n+# 暴露80端口\r\n+EXPOSE 80\r\n+\r\n+# 启动nginx\r\n+CMD [\"nginx\", \"-g\", \"daemon off;\"]\n\\ No newline at end of file\n"
                },
                {
                    "date": 1735360654044,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -25,5 +25,10 @@\n # 暴露80端口\r\n EXPOSE 80\r\n \r\n # 启动nginx\r\n-CMD [\"nginx\", \"-g\", \"daemon off;\"]\n\\ No newline at end of file\n+CMD [\"nginx\", \"-g\", \"daemon off;\"]\r\n+\r\n+# 当你在 Dockerfile 中将构建后的产物（如 dist 文件夹）复制到 Nginx 的默认静态文件目录 /usr/share/nginx/html 时，Nginx 就会直接为静态资源提供服务（例如 HTML 文件、CSS 文件、JavaScript 文件、图片等）。\r\n+# Nginx 以非常高效的方式处理这些请求，通常响应速度比其他应用服务器（如 Node.js）更快。\r\n+# 高效的缓存管理：\r\n+# Nginx 可以通过配置缓存头信息（如 Cache-Control 和 Expires）来缓存静态资源，减少服务器负担。用户在首次访问时，资源会从 Nginx 服务器返回。之后，当资源未更改时，浏览器会从本地缓存中读取，避免再次请求 Nginx 服务器。\n\\ No newline at end of file\n"
                }
            ],
            "date": 1735254861324,
            "name": "Commit-0",
            "content": "# 构建阶段\r\nFROM node:20-alpine as build\r\n\r\n# 设置工作目录\r\nWORKDIR /app\r\n\r\n# 复制package.json和package-lock.json（如果存在）\r\nCOPY package*.json ./\r\n\r\n# 安装依赖\r\nRUN npm install\r\n\r\n# 复制源代码\r\nCOPY . .\r\n\r\n# 构建应用\r\nRUN npm run build\r\n\r\n# 生产阶段\r\nFROM nginx:alpine\r\n\r\n# 复制构建产物到nginx目录\r\nCOPY --from=build /app/dist /usr/share/nginx/html\r\n\r\n# 暴露80端口\r\nEXPOSE 80\r\n\r\n# 启动nginx\r\nCMD [\"nginx\", \"-g\", \"daemon off;\"] "
        }
    ]
}